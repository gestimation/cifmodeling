// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calculateKM
Rcpp::List calculateKM(Rcpp::NumericVector t, Rcpp::IntegerVector d, Rcpp::NumericVector w, Rcpp::IntegerVector strata, std::string error);
RcppExport SEXP _cifmodeling_calculateKM(SEXP tSEXP, SEXP dSEXP, SEXP wSEXP, SEXP strataSEXP, SEXP errorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type strata(strataSEXP);
    Rcpp::traits::input_parameter< std::string >::type error(errorSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateKM(t, d, w, strata, error));
    return rcpp_result_gen;
END_RCPP
}
// calculateIFofAJ
List calculateIFofAJ(NumericVector t, IntegerVector epsilon, IntegerVector strata);
RcppExport SEXP _cifmodeling_calculateIFofAJ(SEXP tSEXP, SEXP epsilonSEXP, SEXP strataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type strata(strataSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateIFofAJ(t, epsilon, strata));
    return rcpp_result_gen;
END_RCPP
}
// calculateIFofNA
List calculateIFofNA(NumericVector t, IntegerVector epsilon, IntegerVector strata);
RcppExport SEXP _cifmodeling_calculateIFofNA(SEXP tSEXP, SEXP epsilonSEXP, SEXP strataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type strata(strataSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateIFofNA(t, epsilon, strata));
    return rcpp_result_gen;
END_RCPP
}
// calculateWeightedAverageLinear
Rcpp::List calculateWeightedAverageLinear(Rcpp::NumericVector time, Rcpp::NumericMatrix curve, Rcpp::List if_list, Rcpp::NumericMatrix contrasts, Rcpp::List weights, Rcpp::Nullable<Rcpp::NumericVector> rho, Rcpp::Nullable<Rcpp::NumericVector> gamma, Rcpp::Nullable<Rcpp::NumericVector> base, double conf_int);
RcppExport SEXP _cifmodeling_calculateWeightedAverageLinear(SEXP timeSEXP, SEXP curveSEXP, SEXP if_listSEXP, SEXP contrastsSEXP, SEXP weightsSEXP, SEXP rhoSEXP, SEXP gammaSEXP, SEXP baseSEXP, SEXP conf_intSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type curve(curveSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type if_list(if_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type contrasts(contrastsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type base(baseSEXP);
    Rcpp::traits::input_parameter< double >::type conf_int(conf_intSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateWeightedAverageLinear(time, curve, if_list, contrasts, weights, rho, gamma, base, conf_int));
    return rcpp_result_gen;
END_RCPP
}
// calculateWeightedAverage
List calculateWeightedAverage(NumericVector time, NumericMatrix aj1, List if_aj1, NumericMatrix contrasts, List weights, Nullable<NumericVector> rho, Nullable<NumericVector> gamma, int weight_base, double conf_int, int ref);
RcppExport SEXP _cifmodeling_calculateWeightedAverage(SEXP timeSEXP, SEXP aj1SEXP, SEXP if_aj1SEXP, SEXP contrastsSEXP, SEXP weightsSEXP, SEXP rhoSEXP, SEXP gammaSEXP, SEXP weight_baseSEXP, SEXP conf_intSEXP, SEXP refSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type aj1(aj1SEXP);
    Rcpp::traits::input_parameter< List >::type if_aj1(if_aj1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type contrasts(contrastsSEXP);
    Rcpp::traits::input_parameter< List >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type weight_base(weight_baseSEXP);
    Rcpp::traits::input_parameter< double >::type conf_int(conf_intSEXP);
    Rcpp::traits::input_parameter< int >::type ref(refSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateWeightedAverage(time, aj1, if_aj1, contrasts, weights, rho, gamma, weight_base, conf_int, ref));
    return rcpp_result_gen;
END_RCPP
}
// calculateMaxCombo
List calculateMaxCombo(NumericVector z, NumericMatrix cov, int n_simulation);
RcppExport SEXP _cifmodeling_calculateMaxCombo(SEXP zSEXP, SEXP covSEXP, SEXP n_simulationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cov(covSEXP);
    Rcpp::traits::input_parameter< int >::type n_simulation(n_simulationSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateMaxCombo(z, cov, n_simulation));
    return rcpp_result_gen;
END_RCPP
}
// callMaxCombo
List callMaxCombo(List out_cwa, std::string measure, int n_simulation);
RcppExport SEXP _cifmodeling_callMaxCombo(SEXP out_cwaSEXP, SEXP measureSEXP, SEXP n_simulationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type out_cwa(out_cwaSEXP);
    Rcpp::traits::input_parameter< std::string >::type measure(measureSEXP);
    Rcpp::traits::input_parameter< int >::type n_simulation(n_simulationSEXP);
    rcpp_result_gen = Rcpp::wrap(callMaxCombo(out_cwa, measure, n_simulation));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cifmodeling_calculateKM", (DL_FUNC) &_cifmodeling_calculateKM, 5},
    {"_cifmodeling_calculateIFofAJ", (DL_FUNC) &_cifmodeling_calculateIFofAJ, 3},
    {"_cifmodeling_calculateIFofNA", (DL_FUNC) &_cifmodeling_calculateIFofNA, 3},
    {"_cifmodeling_calculateWeightedAverageLinear", (DL_FUNC) &_cifmodeling_calculateWeightedAverageLinear, 9},
    {"_cifmodeling_calculateWeightedAverage", (DL_FUNC) &_cifmodeling_calculateWeightedAverage, 10},
    {"_cifmodeling_calculateMaxCombo", (DL_FUNC) &_cifmodeling_calculateMaxCombo, 3},
    {"_cifmodeling_callMaxCombo", (DL_FUNC) &_cifmodeling_callMaxCombo, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_cifmodeling(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
